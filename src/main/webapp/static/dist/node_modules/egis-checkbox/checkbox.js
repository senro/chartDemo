define('node_modules/egis-checkbox/checkbox', function(require, exports, module) {

  
  var $ = require('node_modules/egis-checkbox/node_modules/egis-jquery/jquery');
  
  module.exports = function (str_className, str_selectedClassName, callback, int_maxNum) {
      /*
       * @位置：  常用界面交互方法；
       * @名字：  checkBox；
       * @翻译：  多选框（ 要模拟checkbox选项的类名，已选后的类名，限制个数, 回调 ）；
       * @参数：  checkBox( str_className,str_selectedClassName,int_maxNum )
       *         className（字符串）：【必填】要模拟checkbox选项的类名
       *         selectedClassName（字符串）：【必填】已选后的类名
       *         maxNum（数字）：【可选】限制选项个数，默认不限;
       * @功能：  模拟checkBox的行为，可以限制多选个数，选项里可以有input；
       * @返回：  无；
       * @实例：  /test-html/3.2/UIInteractive/questionnaire.html；
       * @需要：  无；
       * @备注：  结构比如<a class="multi" href="javascript:;">15岁以下</a>；
       */
      var $checkBox =typeof str_className == 'object'?str_className:$('.' + str_className),
          maxNum = int_maxNum || 'noLimit';
      //reset
      //$checkBox.unbind('click');
      //init
      if ($checkBox.find('input[type=checkbox]').length > 0) {
          //如果选项里有input checkbox，则同步其状态
          var $realCheckBoxs=$checkBox.find('input[type=checkbox]');
          $realCheckBoxs.each(function(index){
              var ischecked=$(this).is(':checked')?true:false;
              if(ischecked){
                  $checkBox.eq(index).addClass(str_selectedClassName).attr('data-selected', 'selected');
              }
          });
  
          $checkBox.css({
              position:'relative'
          });
          $realCheckBoxs.css({
              position:'absolute',
              left:'0',
              visibility:'hidden'
          });
      }
      $('body').on('click','.'+str_className,function(){
          var $this = $(this),
              $otherAnswers = $this.siblings();
  
          if (maxNum != 'noLimit' && $otherAnswers.filter('[data-selected=selected]').length >= maxNum) {
              return false;
          } else {
              if (!$this.hasClass(str_selectedClassName)) {
                  $this.addClass(str_selectedClassName);
                  $this.attr('data-selected', 'selected');
              } else {
                  $this.removeClass(str_selectedClassName);
                  $this.attr('data-selected', 'undefind');
              }
          }
          if ($this.find('input[type=checkbox]').length > 0) {
              if($this.find('input[type=checkbox]').is(':checked')){
                  $this.find('input[type=checkbox]').removeAttr('checked');
              }else{
                  $this.find('input[type=checkbox]').prop('checked','checked');
              }
  
          }
          if($.isFunction(callback)) {
              callback($(this));
          }
          return false;
      });
      if ($checkBox.find('input').length > 0) {
          //$checkBox.find('input').unbind('click');
          $('body').on('click','.'+str_className+' input',function (e) {
              var $thisAnswer = $(this).parent(),
                  $thisOtherAnswers = $thisAnswer.siblings();
  
              if (maxNum != 'noLimit' && $thisOtherAnswers.filter('[data-selected=selected]').length >= maxNum) {
                  return false;
              } else {
                  $thisAnswer.addClass(str_selectedClassName);
                  $thisAnswer.attr('data-selected', 'selected');
              }
              e.stopPropagation();
              return false;
          });
      }
      return false;
  };

});
