{"version":3,"sources":["/components/reducers/index.jsx"],"names":[],"mappings":";;;;;;;;;;qBAAgC,OAAO;;4BACd,gBAAgB;;;;;;;;;;;;;;;;;;;;;;;;AAsBzC,IAAM,WAAW,GAAG,4BAAgB;AAChC,gBAAY;CACf,CAAC,CAAC;;qBAEY,WAAW","file":"/components/reducers/index.jsx","sourcesContent":["import { combineReducers } from 'redux'\r\nimport addUserModal from './addUserModal'\r\n\r\n/*\r\ncombineReducers 辅助函数的作用是，把一个由多个不同 reducer 函数作为 value 的 object，\r\n合并成一个最终的 reducer 函数，然后就可以对这个 reducer 调用 createStore。\r\n\r\n合并后的 reducer 可以调用各个子 reducer，并把它们的结果合并成一个 state 对象。\r\nstate 对象的结构由传入的多个 reducer 的 key 决定。\r\n\r\n最终，state 对象的结构会是这样的：\r\n{\r\n    reducer1: ...\r\n    reducer2: ...\r\n}\r\n通过为传入对象的 reducer 命名不同来控制 state key 的命名。\r\n例如，你可以调用 combineReducers({ todos: myTodosReducer, counter: myCounterReducer })\r\n将 state 结构变为 { todos, counter }。\r\n\r\n通常的做法是命名 reducer，然后 state 再去分割那些信息，因此你可以使用 ES6 的简写方法：\r\ncombineReducers({ counter, todos })。这与 combineReducers({ counter: counter, todos: todos })\r\n一样。\r\n*/\r\nconst rootReducer = combineReducers({\r\n    addUserModal\r\n});\r\n\r\nexport default rootReducer\r\n"]}